/** This is generated code */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

{{#each imports ~}}
var {{{pascal_case}}} = require("./{{{camel_case}}}");
{{/each}}

var {{{codec.name.pascal_case}}} = (function () {
{{#each codec.fields }}
  var {{{name.camel_case}}}Schema = {
    name: "{{{name.original}}}",
    offsetInBytes: {{{location.offset_bytes}}},
    bitMask: {{{location.bit_mask.binary}}}, // {{{location.bit_mask.original}}}
    shift: {{{location.shift}}},
  };
{{#if type_info.is_codec}}
  var {{{name.camel_case}}}Codec = new {{type_ref.pascal_case}}();
{{/if}}
{{/each}}

  function {{{codec.name.pascal_case}}}() {
    this.buffer = undefined;
    this.codecOffsetInBytes = -1;
  };

  {{{codec.name.pascal_case}}}.prototype.wrap = function(newBuffer, newOffsetInBytes) {
    this.buffer = newBuffer;
    this.codecOffsetInBytes = newOffsetInBytes;
  };

{{#each codec.fields ~}}
{{#if type_info.is_codec}}
  Object.defineProperty({{{../codec.name.pascal_case}}}.prototype, "{{{name.camel_case}}}", {
    enumerable: true,
    get: function() {
      var codec = {{{name.camel_case}}}Codec;
      var schema = {{{name.camel_case}}}Schema;
      codec.wrap(this.buffer, this.codecOffsetInBytes + schema.offsetInBytes);
      return codec;
    },
  });
{{else}}
{{#if type_info.is_blob}}
  {{{../codec.name.pascal_case}}}.prototype.wrap{{{name.pascal_case}}} = function(wrapper) {
    var schema = {{{name.camel_case}}}Schema;
    var offsetInBytes = this.codecOffsetInBytes + schema.offsetInBytes;
    wrapper.wrap(this.buffer, offsetInBytes);
  };
{{else}}
  Object.defineProperty({{{../codec.name.pascal_case}}}.prototype, "{{{name.camel_case}}}", {
    enumerable: true,
    get: function() {
      return this.buffer.read{{{type_info.kind.pascal_case}}}({{{name.camel_case}}}Schema, this.codecOffsetInBytes);
    },
    set: function(value) {
      this.buffer.write{{{type_info.kind.pascal_case}}}({{{name.camel_case}}}Schema, this.codecOffsetInBytes, value);
    },
  });
{{/if ~}}
{{/if ~}}
{{/each ~}}
})();

exports.{{{codec.name.pascal_case}}} = {{{codec.name.pascal_case}}};
