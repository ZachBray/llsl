use std::result::Result;
use std::convert::TryFrom;
use llsl_runtime::{BufferAdapter, FieldSchema, RuntimeError, Serializable};
{{#each imports ~}}
use super::{{{snake_case}}}::{{{pascal_case}}};
{{/each}}

{{#each codec.fields }}
static {{{name.upper_snake_case}}}_SCHEMA: FieldSchema<{{{type_info.access_type.original}}}> = FieldSchema {
    name: "{{{name.original}}}",
    offset_in_bytes: {{{location.offset_bytes}}},
    bit_mask: {{{location.bit_mask.binary}}}, // {{{location.bit_mask.original}}}
    shift: {{{location.shift}}},
};
{{/each}}

pub struct {{{codec.name.pascal_case}}}<'a> {
  buffer: BufferAdapter<'a>
}

impl<'a> {{{codec.name.pascal_case}}}<'a> {
    pub fn wrap(buffer: BufferAdapter<'a>) -> Result<Self, RuntimeError> {
        if buffer.len() < {{{codec.minimum_size_bytes}}} {
            Err(RuntimeError::Overflow(
                "{{{codec.name.pascal_case}}}",
                {{{codec.minimum_size_bytes}}},
                buffer.len()
            ))
        } else {
            Ok({{{codec.name.pascal_case}}} {
                buffer
            })
        }
    }

    pub fn wrap_unchecked(buffer: BufferAdapter<'a>) -> Self {
        {{{codec.name.pascal_case}}} {
            buffer
        }
    }
{{#each codec.fields ~}}
{{#if type_info.is_bool}}
    pub fn get_{{{name.snake_case}}}(&self) -> bool {
        bool::read(&self.buffer, &{{{name.upper_snake_case}}}_SCHEMA)
    }

    pub fn set_{{{name.snake_case}}}(&mut self, value: bool) {
        bool::write(&mut self.buffer, &{{{name.upper_snake_case}}}_SCHEMA, value)
    }
{{/if ~}}
{{#if type_info.is_byte}}
    pub fn get_{{{name.snake_case}}}(&self) -> u8 {
        u8::read(&self.buffer, &{{{name.upper_snake_case}}}_SCHEMA)
    }

    pub fn set_{{{name.snake_case}}}(&mut self, value: u8) {
        u8.write(&mut self.buffer, &{{{name.upper_snake_case}}}_SCHEMA, value)
    }
{{/if ~}}
{{#if type_info.is_u16}}
    pub fn get_{{{name.snake_case}}}(&self) -> u16 {
        u16::read(&self.buffer, &{{{name.upper_snake_case}}}_SCHEMA)
    }

    pub fn set_{{{name.snake_case}}}(&mut self, value: u16) {
        u16::write(&mut self.buffer, &{{{name.upper_snake_case}}}_SCHEMA, value)
    }
{{/if ~}}
{{#if type_info.is_u32}}
    pub fn get_{{{name.snake_case}}}(&self) -> u32 {
      u32::read(&self.buffer, &{{{name.upper_snake_case}}}_SCHEMA)
    }

    pub fn set_{{{name.snake_case}}}(&mut self, value: u32) {
      u32::write(&mut self.buffer, &{{{name.upper_snake_case}}}_SCHEMA, value)
    }
{{/if ~}}
{{#if type_info.is_enum}}
    pub fn get_{{{name.snake_case}}}(&self) -> Result<{{{type_ref.pascal_case}}}, RuntimeError> {
        let value = u32::read(&self.buffer, &{{{name.upper_snake_case}}}_SCHEMA);
        {{{type_ref.pascal_case}}}::try_from(value)
    }

    pub fn set_{{{name.snake_case}}}(&mut self, value: {{{type_ref.pascal_case}}}) {
        let u32_value: u32 = value.into();
        u32::write(&mut self.buffer, &{{{name.upper_snake_case}}}_SCHEMA, u32_value)
    }
{{/if ~}}
{{#if type_info.is_codec}}
    pub fn get_{{{name.snake_case}}}(&mut self) -> {{{type_ref.pascal_case}}} {
        let buffer = self.buffer.seek_field(&{{{name.upper_snake_case}}}_SCHEMA);
        {{{type_ref.pascal_case}}}::wrap_unchecked(buffer)
    }
{{/if ~}}
{{#if type_info.is_blob}}
    pub fn get_{{{name.snake_case}}}(&mut self) -> BufferAdapter {
        self.buffer.seek_field(&{{{name.upper_snake_case}}}_SCHEMA)
    }
{{/if ~}}
{{/each ~}}
}
