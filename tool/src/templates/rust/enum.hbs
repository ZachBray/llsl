/** This is generated code */
use std::result::Result;
use llsl_runtime::RuntimeError;

#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum {{{name.pascal_case}}} {
{{#each cases}}
    /**
     * {{{description}}}
     */
    {{{name.pascal_case}}} = {{{value.original}}},
{{/each}}
}

impl Into<u32> for {{{name.pascal_case}}} {
    fn into(self) -> u32 {
        match self {
        {{#each cases}}
            {{{name.pascal_case}}} => {{{value.original}}},
        {{/each}}
        }
    }
}

impl TryFrom<u32> for {{{name.pascal_case}}} {
    type Error = RuntimeError;

    fn try_from(value: u32) -> Result<Self, RuntimeError> {
        match value {
        {{#each cases}}
             {{{value.original}}} => Ok({{{../name.pascal_case}}}::{{{name.pascal_case}}})
        {{/each}}
             _ => Err(RuntimeError::InvalidEnumValue("{{{name.pascal_case}}}", value))
        }
    }
}
